<?xml version="1.0" encoding="utf-8"?>
<File>
	<Modules>
		<Module Name="ExampleEntities">
			<RemoveFiles Path="Southwind\Customers\Company.tsx"/>
			<RemoveFiles Path="Southwind\Customers\CompanyEntity.cs"/>
			<RemoveFiles Path="Southwind\Customers\CustomerEntity.cs"/>
			<RemoveFiles Path="Southwind\Customers\CustomersLogic.cs"/>
			<RemoveFiles Path="Southwind\Customers\CustomersClient.tsx"/>
			<RemoveFiles Path="Southwind\Customers\Person.tsx"/>
			<RemoveFiles Path="Southwind\Customers\PersonEntity.cs"/>
			<RemoveFiles Path="Southwind\Customers\Southwind.Customers.t4s"/>
			<RemoveFiles Path="Southwind\Customers\Southwind.Customers.ts"/>
			<RemoveFiles Path="Southwind\Customers\AddressEmbedded.cs"/>
			<RemoveFiles Path="Southwind\Customers\Address.tsx"/>
			<RemoveFiles Path="Southwind\Employees\Employee.tsx"/>
			<RemoveFiles Path="Southwind\Employees\EmployeeEntity.cs"/>
			<RemoveFiles Path="Southwind\Employees\EmployeesLogic.cs"/>
			<RemoveFiles Path="Southwind\Employees\EmployeesClient.tsx"/>
			<RemoveFiles Path="Southwind\Employees\RegionEntity.cs"/>
			<RemoveFiles Path="Southwind\Employees\Southwind.Employees.t4s"/>
			<RemoveFiles Path="Southwind\Employees\Southwind.Employees.ts"/>
			<RemoveFiles Path="Southwind\Employees\TerritoryEntity.cs"/>
			<RemoveFiles Path="Southwind\Orders\OrderEntity.cs"/>
			<RemoveFiles Path="Southwind\Orders\Order.tsx"/>
			<RemoveFiles Path="Southwind\Orders\OrderFilter.tsx"/>
			<RemoveFiles Path="Southwind\Orders\OrdersLogic.cs"/>
			<RemoveFiles Path="Southwind\Orders\OrdersClient.tsx"/>
			<RemoveFiles Path="Southwind\Orders\Southwind.Orders.t4s"/>
			<RemoveFiles Path="Southwind\Orders\Southwind.Orders.ts"/>
			<RemoveFiles Path="Southwind\Products\Category.tsx"/>
			<RemoveFiles Path="Southwind\Products\CategoryEntity.cs"/>
			<RemoveFiles Path="Southwind\Products\Product.tsx"/>
			<RemoveFiles Path="Southwind\Products\ProductEntity.cs"/>
			<RemoveFiles Path="Southwind\Products\ProductsLogic.cs"/>
			<RemoveFiles Path="Southwind\Products\ProductsClient.tsx"/>
			<RemoveFiles Path="Southwind\Products\Southwind.Products.t4s"/>
			<RemoveFiles Path="Southwind\Products\Southwind.Products.ts"/>
			<RemoveFiles Path="Southwind\Products\Supplier.tsx"/>
			<RemoveFiles Path="Southwind\Products\SupplierEntity.cs"/>
			<RemoveFiles Path="Southwind\Shippers\ShippersClient.tsx"/>
			<RemoveFiles Path="Southwind\Shippers\ShipperEntity.cs"/>
			<RemoveFiles Path="Southwind\Shippers\ShippersLogic.cs"/>
			<RemoveFiles Path="Southwind\Shippers\Southwind.Shippers.t4s"/>
			<RemoveFiles Path="Southwind\Shippers\Southwind.Shippers.ts"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="using Southwind.Products;"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="using Southwind.Orders;"/>
			<RemoveLine Path="Southwind.Terminal\Program.cs" Line="using Southwind.Orders;"/>
			<RemoveLine Path="Southwind.Terminal\Program.cs" Line="{&quot;SO&quot;, ShowOrder},"/>
			<RemoveLine Path="Southwind.Terminal\Program.cs" From="static void ShowOrder()" To="}//ShowOrder"/>
			
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.ImplementedByAllPrimaryKeyTypes.Add(typeof(Guid)); //because Customer" />
			<RemoveLine Path="Southwind\Starter.cs" Line="MixinDeclarations.Register&lt;OrderDetailEmbedded, OrderDetailMixin>();"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.TypeAttributes&lt;OrderEntity>().Add(new SystemVersionedAttribute());"/>
			<RemoveLine Path="Southwind\Starter.cs" From="EmployeesLogic.Start(sb);" To="ShippersLogic.Start(sb);"/>
			<RemoveLine Path="Southwind\Starter.cs"
						Line="TypeConditionLogic.Register&lt;OrderEntity>(SouthwindTypeCondition.CurrentEmployee, o => o.Employee.Is(EmployeeEntity.Current));"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="CacheLogic.CacheTable&lt;ShipperEntity>(sb);"/>

			<RemoveLine Path="Southwind\Starter.cs" Line="using Southwind.Customers;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Southwind.Employees;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Southwind.Orders;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Southwind.Products;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Southwind.Shippers;"/>
			
			<RemoveLine Path="Southwind.Test.Environment/SouthwindEnvironment.cs" Line="using Southwind.Customers;"/>
			<RemoveLine Path="Southwind.Test.Environment/SouthwindEnvironment.cs" Line="using Southwind.Employees;"/>
			<RemoveLine Path="Southwind.Test.Environment/SouthwindEnvironment.cs" Line="using Southwind.Products;"/>
			<RemoveLine Path="Southwind.Test.Environment/SouthwindEnvironment.cs" Line="using Southwind.Shippers;"/>

			<RemoveLine Path="Southwind.Test.Logic/OrderTest.cs" Line="using Southwind.Customers;"/>
			<RemoveLine Path="Southwind.Test.Logic/OrderTest.cs" Line="using Southwind.Orders;"/>
			<RemoveLine Path="Southwind.Test.Logic/OrderTest.cs" Line="using Southwind.Products;"/>
			<RemoveLine Path="Southwind.Test.React/OrderReactTest.cs" Line="using Southwind.Customers;"/>
			<RemoveLine Path="Southwind.Test.React/OrderReactTest.cs" Line="using Southwind.Orders;"/>
			<RemoveLine Path="Southwind.Test.React/OrderReactTest.cs" Line="using Southwind.Products;"/>

			
			
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { CustomersClient } from &quot;./Customers/CustomersClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="CustomersClient.start({ routes });"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { EmployeesClient } from &quot;./Employees/EmployeesClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="EmployeesClient.start({ routes });"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { OrdersClient } from &quot;./Orders/OrdersClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="OrdersClient.start({ routes });"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { ProductsClient } from &quot;./Products/ProductsClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="ProductsClient.start({ routes });"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { ShippersClient } from &quot;./Shippers/ShippersClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="ShippersClient.start({ routes });"/>
		</Module>

		<Module Name="Migrations">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Migrations;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="MigrationLogic.Start(sb);"/>
			<RemoveLine Path="Southwind.Terminal\Program.cs" Line="using Signum.Migrations;"/>
			<RemoveLine Path="Southwind.Terminal\Program.cs" From="if (args.Any())" To="} //if(args.Any())"/>
			<RemoveLine Path="Southwind.Terminal\Program.cs" Line="{&quot;SQL&quot;, SqlMigrationRunner.SqlMigrations},"/>
			<RemoveLine Path="Southwind.Terminal\Program.cs" Line="{&quot;CS&quot;, () => SouthwindMigrations.CSharpMigrations(false), &quot;C# Migrations&quot;},"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" From="public static void CSharpMigrations(bool autoRun)" To="} //CSharpMigrations"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Migrations\Signum.Migrations.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Migrations\Signum.Migrations.csproj"/>
		</Module>

		<Module Name="LoadNorthwind" DependsOn="ExampleEntities,Migrations">
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" From="EmployeeLoader.LoadRegions," To="OrderLoader.SimulateOrderSystemTime,"/>
			<RemoveFiles Path="Southwind.Terminal\CustomerLoader.cs"/>
			<RemoveFiles Path="Southwind.Terminal\EmployeeLoader.cs"/>
			<RemoveFiles Path="Southwind.Terminal\NorthwindSchema.cs"/>
			<RemoveFiles Path="Southwind.Terminal\OrderLoader.cs"/>
			<RemoveFiles Path="Southwind.Terminal\ProductLoader.cs"/>
			<RemoveFiles Path="Southwind.Terminal\SupplierFaxes.csv"/>
			<RemoveLine Path="Southwind.Terminal\appsettings.json" Line="&quot;NorthwindConnectionString&quot;: &quot;Data Source=.\\SQLEXPRESS;Initial Catalog=Northwind;Integrated Security=True;TrustServerCertificate=true&quot;"/>
		</Module>

		<Module Name="UserQuery">
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((UserQueryEntity uq) => uq.Owner).Replace(new ImplementedByAttribute(typeof(UserEntity), typeof(RoleEntity)));"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="UserQueryLogic.Start(sb);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="UserQueryLogic.RegisterUserTypeCondition(sb, SouthwindTypeCondition.UserEntities);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="UserQueryLogic.RegisterRoleTypeCondition(sb, SouthwindTypeCondition.RoleEntities);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="UserQueryLogic.RegisterTranslatableRoutes();"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { UserQueryClient } from &quot;@extensions/Signum.UserQueries/UserQueryClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="UserQueryClient.start({ routes });"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.UserQueries;"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.UserQueries\Signum.UserQueries.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.UserQueries\Signum.UserQueries.csproj"/>
		</Module>

		<Module Name="Word">
			<RemoveLine Path="Southwind\Starter.cs" Line="WordTemplateLogic.Start(sb);"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { WordClient } from &quot;@extensions/Signum.Word/WordClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="WordClient.start({ routes, contextual: true, queryButton: true, entityButton: false });"/>
			<RemoveLine DependsOn="ExampleEntities,Migrations" Path="Southwind.Terminal\SouthwindMigrations.cs" Line="ImportWordReportTemplateForOrder,"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Terminal\SouthwindMigrations.cs" From="public static void ImportWordReportTemplateForOrder()" To="}"/>
			<RemoveFiles DependsOn="ExampleEntities" Path="Southwind.Terminal\WordAssets.xml"/>
			<RemoveFiles DependsOn="ExampleEntities" Path="Southwind.Terminal\WordTemplates\Order.docx"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Word;"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="using Signum.Word;"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Word\Signum.Word.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Word\Signum.Word.csproj"/>
		</Module>

		<Module Name="Chart" DependsOn="Files">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Chart;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Chart.UserChart;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((UserChartEntity uc) => uc.Owner).Replace(new ImplementedByAttribute(typeof(UserEntity), typeof(RoleEntity)));"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="ChartLogic.Start(sb, googleMapsChartScripts: false /*requires Google Maps API key in ChartClient */);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="UserChartLogic.RegisterUserTypeCondition(sb, SouthwindTypeCondition.UserEntities);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="UserChartLogic.RegisterRoleTypeCondition(sb, SouthwindTypeCondition.RoleEntities);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="UserChartLogic.RegisterTranslatableRoutes();"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { ChartClient } from &quot;@extensions/Signum.Chart/ChartClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="ChartClient.start({ routes });"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Chart\Signum.Chart.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Chart\Signum.Chart.csproj"/>
		</Module>

		<Module Name="Files">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Files;"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="using Signum.Files;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Files.FileTypeAlgorithms;"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" Line="using Signum.Files;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="MixinDeclarations.Register&lt;BigStringEmbedded, BigStringMixin>();"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="ConfigureBigString(sb);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="FilePathEmbeddedLogic.Start(sb);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="FileLogic.Start(sb);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="BigStringLogic.Start(sb);"/>
			<RemoveLine Path="Southwind\Starter.cs" From="public static void ConfigureBigString(SchemaBuilder sb)" To="}//ConfigureBigString"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { FilesClient } from &quot;@extensions/Signum.Files/FilesClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="FilesClient.start({ routes });"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Employees\EmployeeEntity.cs" Line="public Lite&lt;FileEntity>? Photo { get; set; } //1"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Employees\EmployeeEntity.cs" Line="public Lite&lt;FileEntity>? Photo { get; set; } //2"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Products\CategoryEntity.cs" Line="public FileEmbedded? Picture { get; set; }"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Terminal\EmployeeLoader.cs" Line="Photo = new FileEntity { FileName = e.PhotoPath!.AfterLast('/'), BinaryFile = RemoveOlePrefix(e.Photo!.ToArray()) }.ToLiteFat(),"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Terminal\EmployeeLoader.cs" From="public static byte[] RemoveOlePrefix(byte[] bytes)" To="} //RemoveOlePrefix"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Terminal\ProductLoader.cs" Line="Picture = new FileEmbedded { FileName = s.CategoryName + &quot;.jpg&quot;, BinaryFile = EmployeeLoader.RemoveOlePrefix(s.Picture!.ToArray()) },"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Products\ProductsLogic.cs" Line="s.Picture"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Employees\EmployeesLogic.cs" Line="Photo = e.Photo,"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Employees\EmployeesLogic.cs" Line="e.Photo, //1"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Employees\EmployeesLogic.cs" Line="e.Photo, //2"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Employees\EmployeesClient.tsx" From="&lt;FileImage" To="file={lite.model.photo} />"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Employees\EmployeesClient.tsx" From="{/*Files*/ }" To="{/*Files*/ }"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Products\Category.tsx" Line="const forceUpdate = useForceUpdate();"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Products\Category.tsx" Line="const maxDimensions: React.CSSProperties = { maxWidth: &quot;96px&quot;, maxHeight: &quot;96px&quot; };"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Products\Category.tsx" Line="&lt;FileLine ctx={ctx.subCtx(c => c.picture)} onChange={() => forceUpdate()} />"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Products\Category.tsx" From="&lt;div className=&quot;col-sm-3&quot;>{/*photo*/}" To="&lt;/div>{/*photo*/}"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Employees\Employee.tsx" From="{/*photo*/}" To="{/*photo*/}"/>

			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" From="/*Exceptions*/" To="public string ExceptionsFolder { get; set; }"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" Line="public static FileTypeSymbol Exceptions;"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="ExceptionsFolder = localPrefix + @&quot;exceptions&quot;,"/>
			<RemoveLine Path="Southwind.Test.Environment\SouthwindEnvironment.cs" Line="ExceptionsFolder = localPrefix + @&quot;exceptions&quot;,"/>

			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" From="/*OperationLog*/" To="public string OperationLogFolder { get; set; }"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" Line="public static FileTypeSymbol OperationLog;"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="OperationLogFolder = localPrefix + @&quot;operation-logs&quot;,"/>
			<RemoveLine Path="Southwind.Test.Environment\SouthwindEnvironment.cs" Line="OperationLogFolder = localPrefix + @&quot;operation-logs&quot;,"/>

			<RemoveLine DependsOn="ViewLog" Path="Southwind\Globals\ApplicationConfigurationEntity.cs" From="/*ViewLog*/" To="public string ViewLogFolder { get; set; }"/>
			<RemoveLine DependsOn="ViewLog" Path="Southwind\Globals\ApplicationConfigurationEntity.cs" Line="public static FileTypeSymbol ViewLog;"/>
			<RemoveLine DependsOn="ViewLog" Path="Southwind.Terminal\SouthwindMigrations.cs" Line="ViewLogFolder = localPrefix + @&quot;view-logs&quot;,"/>
			<RemoveLine DependsOn="ViewLog" Path="Southwind.Test.Environment\SouthwindEnvironment.cs" Line="ViewLogFolder = localPrefix + @&quot;view-logs&quot;,"/>
			<RemoveLine DependsOn="ViewLog" Path="Southwind\Starter.cs" Line="FileTypeLogic.Register(BigStringFileType.ViewLog, GetFileTypeAlgorithm(c => c.ViewLogFolder));"/>
			<RemoveLine DependsOn="ViewLog" Path="Southwind\Starter.cs" Line="BigStringLogic.RegisterAll&lt;ViewLogEntity>(sb, new BigStringConfiguration(mode, BigStringFileType.ViewLog));"/>

			<RemoveLine DependsOn="PublicAPI" Path="Southwind\Globals\ApplicationConfigurationEntity.cs" From="/*RestLog*/" To="public string RestLogFolder { get; set; }"/>
			<RemoveLine DependsOn="PublicAPI" Path="Southwind\Starter.cs" Line="FileTypeLogic.Register(BigStringFileType.RestLog, GetFileTypeAlgorithm(c => c.RestLogFolder));"/>
			<RemoveLine DependsOn="PublicAPI" Path="Southwind\Starter.cs" Line="BigStringLogic.RegisterAll&lt;RestLogEntity>(sb, new BigStringConfiguration(mode, BigStringFileType.RestLog));"/>
			<RemoveLine DependsOn="PublicAPI" Path="Southwind.Terminal\SouthwindMigrations.cs" Line="RestLogFolder = localPrefix + @&quot;rest-logs&quot;,"/>
			<RemoveLine DependsOn="PublicAPI" Path="Southwind.Test.Environment\SouthwindEnvironment.cs" Line="RestLogFolder = localPrefix + @&quot;rest-logs&quot;,"/>

			<RemoveLine DependsOn="Mailing" Path="Southwind\Globals\ApplicationConfigurationEntity.cs" From="/*EmailMessage*/" To="public string EmailMessageFolder { get; set; }"/>
			<RemoveLine DependsOn="Mailing" Path="Southwind\Globals\ApplicationConfigurationEntity.cs" Line="public static FileTypeSymbol EmailMessage;"/>
			<RemoveLine DependsOn="Mailing" Path="Southwind.Terminal\SouthwindMigrations.cs" Line="EmailMessageFolder = localPrefix + @&quot;email-messages&quot;,"/>
			<RemoveLine DependsOn="Mailing" Path="Southwind.Test.Environment\SouthwindEnvironment.cs" Line="EmailMessageFolder = localPrefix + @&quot;email-messages&quot;,"/>
			<RemoveLine DependsOn="Dashboard" Path="Southwind\Starter.cs" Line="FileTypeLogic.Register(BigStringFileType.EmailMessage, GetFileTypeAlgorithm(c => c.EmailMessageFolder));"/>
			<RemoveLine DependsOn="Dashboard" Path="Southwind\Starter.cs" Line="BigStringLogic.RegisterAll&lt;EmailMessageEntity>(sb, new BigStringConfiguration(mode, BigStringFileType.EmailMessage));"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Files\Signum.Files.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Files\Signum.Files.csproj"/>
		</Module>

		<Module Name="Excel">
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { ExcelClient } from &quot;@extensions/Signum.Excel/ExcelClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="ExcelClient.start({ routes, plainExcel: true, importFromExcel: true, excelReport: true });"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Excel;"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Excel\Signum.Excel.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Excel\Signum.Excel.csproj"/>
		</Module>

		<Module Name="Dashboard" DependsOn="Chart,UserQuery">
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((DashboardEntity cp) => cp.Owner).Replace(new ImplementedByAttribute(typeof(UserEntity), typeof(RoleEntity)));"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="DashboardLogic.Start(sb, GetFileTypeAlgorithm(p => p.CachedQueryFolder));"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="DashboardLogic.RegisterUserTypeCondition(sb, SouthwindTypeCondition.UserEntities);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="DashboardLogic.RegisterRoleTypeCondition(sb, SouthwindTypeCondition.RoleEntities);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="DashboardLogic.RegisterTranslatableRoutes();"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="CachedQueryFolder = localPrefix + @&quot;cached-query&quot;,"/>
			<RemoveLine Path="Southwind.Test.Environment\SouthwindEnvironment.cs" Line="CachedQueryFolder = localPrefix + @&quot;cached-query&quot;,"/>
			<RemoveLine Path="Southwind\Home.tsx" From="if (AuthClient.currentUser()) {" To="else //Dashboard"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { DashboardClient } from &quot;@extensions/Signum.Dashboard/DashboardClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="DashboardClient.start({ routes });"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Terminal\Toolbar.xml" From="&lt;UserChart Guid=&quot;d681b3f5-a3a9-4228-93e9-e856f45d911a&quot; DisplayName=&quot;Evolution By Employee&quot; Query=&quot;Order&quot; HideQuickLink=&quot;false&quot; Owner=&quot;User;2&quot; ChartScript=&quot;D3ChartScript.StackedLines&quot;&gt;"  To="&lt;/Dashboard>"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Terminal\Toolbar.xml" Line="&lt;ToolbarElement Type=&quot;Item&quot; IconName=&quot;fas fa-tachometer-alt&quot; IconColor=&quot;blue&quot; Content=&quot;7914fa80-dfd6-42a2-b29a-18e8cc5851f8&quot; />" />
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Dashboard;"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="using Signum.Dashboard;"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Dashboard\Signum.Dashboard.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Dashboard\Signum.Dashboard.csproj"/>
		</Module>

		<Module Name="ViewLog">

			<RemoveLine Path="Southwind\Starter.cs" Line="ViewLogLogic.Start(sb, new HashSet&lt;Type> { typeof(UserQueryEntity), typeof(UserChartEntity), typeof(DashboardEntity) });"/>
			<RemoveLine Path="Southwind.Terminal\Toolbar.xml" Line="&lt;ToolbarElement Type=&quot;Item&quot; Content=&quot;ViewLog&quot; />" />
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.ViewLog;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((ViewLogEntity cp) => cp.User).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.ViewLog\Signum.ViewLog.csproj&quot; />"/>
		</Module>

		<Module Name="Toolbar">
			<RemoveLine Path="Southwind\Starter.cs" Line="ToolbarLogic.Start(sb);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="ToolbarLogic.RegisterTranslatableRoutes();"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { ToolbarClient } from &quot;@extensions/Signum.Toolbar/ToolbarClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="ToolbarClient.start({ routes });"/>
			<RemoveLine Path="Southwind\Layout.tsx" Line="const ToolbarRenderer = React.lazy(() => import(&quot;@extensions/Signum.Toolbar/Renderers/ToolbarRenderer&quot;));"/>
			<RemoveLine Path="Southwind\Layout.tsx" From="hasUser ? &lt;React.Suspense fallback={JavascriptMessage.loading.niceToString()}>"
						To="&lt;/React.Suspense> :"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Terminal\Toolbar.xml" From="&lt;UserQuery Guid=&quot;37ae5c35-8d2b-41f7-acbf-5ef93c91c8ca&quot; DisplayName=&quot;Employees&quot; Query=&quot;Employee&quot; ColumnsMode=&quot;ReplaceAll&quot;&gt;" To="&lt;/UserQuery>" />
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Terminal\Toolbar.xml" From="&lt;ToolbarMenu Guid=&quot;fd577065-f887-4567-8da3-9d5bcc1cedfd&quot; Name=&quot;Products&quot;>" To="&lt;/ToolbarMenu>" />
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Terminal\Toolbar.xml" From="&lt;ToolbarMenu Guid=&quot;8b7e4ac5-cf45-41cb-8cff-4ce04506e12f&quot; Name=&quot;Employee&quot;>" To="&lt;/ToolbarMenu>" />
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Terminal\Toolbar.xml" From="&lt;ToolbarElement Type=&quot;Item&quot; IconName=&quot;fas fa-shopping-cart&quot; IconColor=&quot;orange&quot; Content=&quot;Order&quot; />"
						To="&lt;ToolbarElement Type=&quot;Item&quot; IconName=&quot;fas fa-user&quot; IconColor=&quot;seagreen&quot; Content=&quot;8b7e4ac5-cf45-41cb-8cff-4ce04506e12f&quot; />" />
			<RemoveLine DependsOn="Dynamic" Path="Southwind.Terminal\Toolbar.xml" Line="&lt;ToolbarElement Type=&quot;Item&quot; Label=&quot;Dynamic Panel&quot; IconName=&quot;fas fa-arrows-alt&quot; IconColor=&quot;#9b6bcc&quot; Content=&quot;EvalPanelPermission.ViewDynamicPanel&quot; Url=&quot;~/dynamic/panel&quot; />" />
			<RemoveLine DependsOn="Workflow" Path="Southwind.Terminal\Toolbar.xml" Line="&lt;ToolbarElement Type=&quot;Item&quot; Label=&quot;Workflow Script Runner&quot; IconName=&quot;fas fa-random&quot; IconColor=&quot;#9b6bcc&quot; Content=&quot;WorkflowPermission.ViewWorkflowPanel&quot; Url=&quot;~/workflow/panel&quot; />" />
			<RemoveLine DependsOn="Workflow" Path="Southwind.Terminal\Toolbar.xml" Line="&lt;ToolbarElement Type=&quot;Item&quot; Content=&quot;WorkflowPermission.WorkflowToolbarMenu&quot; />" />
			<RemoveLine DependsOn="Workflow" Path="Southwind.Terminal\Toolbar.xml" From="&lt;ToolbarMenu Guid=&quot;b9423939-ec3d-4495-9361-a335390d93a6&quot; Name=&quot;Workflow&quot;>" To="&lt;/ToolbarMenu>" />
			<RemoveLine DependsOn="Workflow" Path="Southwind.Terminal\Toolbar.xml" Line="&lt;ToolbarElement Type=&quot;Item&quot; IconName=&quot;fas fa-random&quot; IconColor=&quot;saddlebrown&quot; Content=&quot;b9423939-ec3d-4495-9361-a335390d93a6&quot; />" />
			<RemoveLine Path="Southwind.Terminal\Toolbar.xml" From="&lt;ToolbarMenu Guid=&quot;2deb71ea-f065-4fe3-9215-90460bc2d5ec&quot; Name=&quot;Reports&quot;>" To="&lt;/Toolbar>" />
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="using Signum.Toolbar;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Toolbar;"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Toolbar\Signum.Toolbar.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Toolbar\Signum.Toolbar.csproj"/>
		</Module>

		<Module Name="Process">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Processes;"/>
			<RemoveLine Path="Southwind.Server\Program.cs" Line="using Signum.Processes;"/>
			<RemoveLine Path="Southwind\Orders\OrderEntity.cs" Line="public static ConstructSymbol&lt;ProcessEntity&gt;.FromMany&lt;OrderEntity&gt; CancelWithProcess;"/>
			<RemoveLine Path="Southwind\Orders\OrderEntity.cs" From="[AutoInit]//OrderProcess" To="}"/>
			<RemoveLine Path="Southwind\Orders\OrdersLogic.cs" Line="ProcessLogic.Register(OrderProcess.CancelOrders, new CancelOrderAlgorithm());"/>
			<RemoveLine Path="Southwind\Orders\OrdersLogic.cs" From="public class CancelOrderAlgorithm : PackageExecuteAlgorithm&lt;OrderEntity&gt;" To="} //CancelOrderAlgorithm"/>
			<RemoveLine Path="Southwind\Orders\OrdersLogic.cs" From="new Graph&lt;ProcessEntity&gt;.ConstructFromMany&lt;OrderEntity&gt;(OrderOperation.CancelWithProcess)" To="}.Register();"/>
			<RemoveLine Path="Southwind\Starter.cs"
						From="sb.Schema.Settings.FieldAttributes((PackageLineEntity cp) => cp.Package).Replace(new ImplementedByAttribute(typeof(PackageEntity), typeof(PackageOperationEntity)));"
						To="sb.Schema.Settings.FieldAttributes((ProcessEntity s) => s.User).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
			<RemoveLine Path="Southwind\Starter.cs" From="ProcessLogic.Start(sb);"
						To="PackageLogic.Start(sb, packages: true, packageOperations: true);"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { ProcessClient } from &quot;@extensions/Signum.Processes/ProcessClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="ProcessClient.start({ routes, packages: true, packageOperations: true });"/>
			<RemoveLine Path="Southwind.Server\Program.cs" Line="ProcessRunner.StartRunningProcessesAfter(5 * 1000);"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Processes\Signum.Processes.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Processes\Signum.Processes.csproj"/>
		</Module>

		<Module Name="Scheduler" DependsOn="Process">
			<RemoveLine Path="Southwind.Server\Program.cs" Line="using Signum.Scheduler;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Scheduler;"/>
			<RemoveLine Path="Southwind\Orders\OrderEntity.cs" From="[AutoInit]//OrderTask" To="}"/>
			<RemoveLine Path="Southwind\Orders\OrdersLogic.cs" From="SimpleTaskLogic.Register(OrderTask.CancelOldOrdersWithProcess, ctx =>" To="});//CancelOldOrdersProcess"/>

			<RemoveLine Path="Southwind\Starter.cs"
						From="sb.Schema.Settings.FieldAttributes((ScheduledTaskEntity a) => a.User).Replace(new ImplementedByAttribute(typeof(UserEntity)));"
						To="sb.Schema.Settings.FieldAttributes((ScheduledTaskLogEntity a) => a.User).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="SchedulerLogic.Start(sb);"/>
			<RemoveLine Path="Southwind.Server\Program.cs" Line="ScheduleTaskRunner.StartScheduledTaskAfter(5 * 1000);"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { SchedulerClient } from &quot;@extensions/Signum.Scheduler/SchedulerClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="SchedulerClient.start({ routes });"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Scheduler\Signum.Scheduler.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Scheduler\Signum.Scheduler.csproj"/>
		</Module>

		<Module Name="Mailing">

			<RemoveLine Path="Southwind.Test.Environment\SouthwindEnvironment.cs" Line="using Signum.Mailing;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Mailing;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Mailing.Package;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Mailing.MicrosoftGraph;"/>
			<RemoveLine Path="Southwind.Server\Program.cs" Line="using Signum.Mailing;"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="using Signum.Mailing;"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" Line="using Signum.Mailing;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Eval;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((EmailMessageEntity em) => em.From.EmailOwner).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((EmailMessageEntity em) => em.Recipients.First().EmailOwner).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((EmailSenderConfigurationEntity em) => em.DefaultFrom!.EmailOwner).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((EmailSenderConfigurationEntity em) => em.AdditionalRecipients.First().EmailOwner).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((EmailSenderConfigurationEntity em) => em.Service).Replace(new ImplementedByAttribute(typeof(SmtpEmailServiceEntity), typeof(MicrosoftGraphEmailServiceEntity)));" DependsOn="AzureAD" />
			<RemoveLine Path="Southwind\Starter.cs" Line="EmailLogic.Start(sb, () => Configuration.Value.Email, (template, target, message) => Configuration.Value.EmailSender);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="MailingMicrosoftGraphLogic.Start(sb);" DependsOn="AzureAD"  />
			<RemoveLine Path="Southwind\Globals\GlobalsLogic.cs" From="s.Email.SendEmails," To="s.Email.UrlLeft"/>
			<RemoveLine Path="Southwind.Server\Program.cs" Line="AsyncEmailSender.StartAsyncEmailSenderAfter(5 * 1000);" />
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { MailingClient } from &quot;@extensions/Signum.Mailing/MailingClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="MailingClient.start({ routes, contextual: true, queryButton: true });"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" From="/*Email*/" To="public EmailSenderConfigurationEntity EmailSender { get; set; }"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfiguration.tsx" From="&lt;Tab eventKey=&quot;tab&quot; title={ctx.niceName(a => a.email)}>" To="&lt;/Tab>"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" From="Email = new EmailConfigurationEmbedded" To="}, //Email"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Mailing\Signum.Mailing.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Mailing\Signum.Mailing.csproj"/>
		</Module>

		<Module Name="SMS">
			<RemoveLine Path="Southwind.Test.Environment\SouthwindEnvironment.cs" Line="using Signum.SMS;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.SMS;"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="using Signum.SMS;"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" Line="using Signum.SMS;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="SMSLogic.Start(sb, null, () => Configuration.Value.Sms);" />
			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" From="/*Sms*/" To="public SMSConfigurationEmbedded Sms { get; set; }"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfiguration.tsx" From="&lt;Tab eventKey=&quot;sms&quot; title={ctx.niceName(a => a.sms)}>" To="&lt;/Tab>"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" From="Sms = new SMSConfigurationEmbedded" To="}, //Sms"/>
			<RemoveLine Path="Southwind.Test.Environment\SouthwindEnvironment.cs" From="Sms = new SMSConfigurationEmbedded" To="}, //Sms"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.SMS\Signum.SMS.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.SMS\Signum.SMS.csproj"/>
		</Module>

		<Module Name="Auth">
			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" Line="using Signum.Authorization.Rules;"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" Line="using Signum.Authorization.AuthToken;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="AuthLogic.Start(sb, &quot;System&quot;,  &quot;Anonymous&quot;); /* null); anonymous*/"/>
			<RemoveSpanInLines Path="Southwind\Starter.cs" Span="&quot;Anonymous&quot;); /*" DependsOn="PublicCatalog"/>
			<RemoveLine Path="Southwind.Test.Environment\SouthwindEnvironment.cs" Line="CreateUser(&quot;Anonymous&quot;, roles.GetOrThrow(&quot;Anonymous&quot;));" DependsOn="PublicCatalog"/>
			<RemoveSpanInLines Path="Southwind\Products\CategoryEntity.cs" Span=", AllowUnauthenticated" DependsOn="PublicCatalog"/>
			<RemoveSpanInLines Path="Southwind\Starter.cs" Span="anonymous*/" DependsOn="PublicCatalog"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="AuthLogic.LoadRoles();"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" From="UserEntity anonymous = new UserEntity" To="}.Save(); //Anonymous"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="AuthLogic.StartAllModules(sb, () => Starter.Configuration.Value.AuthTokens);"/>
			<RemoveSpanInLines Path="Southwind\Starter.cs" Span="typeof(UserEntity),"/>
			<RemoveSpanInLines Path="Southwind\Starter.cs" Span="typeof(UserEntity)"/>
			<RemoveSpanInLines Path="Southwind\Starter.cs" Span="typeof(RoleEntity)"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" From="/*Auth*/" To="public AuthTokenConfigurationEmbedded AuthTokens { get; set; }"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfiguration.tsx" From="&lt;Tab eventKey=&quot;auth&quot; title={ctx.niceName(a => a.authTokens)}>" To="&lt;/Tab>"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" From="AuthTokens = new AuthTokenConfigurationEmbedded" To="}, //Auth"/>
			<RemoveLine Path="Southwind.Server\Program.cs" Line="AuthTokenEncryptionKey = app.Configuration.GetValue&lt;string>(&quot;AuthTokenEncryptionKey&quot;)!," />
			<RemoveLine Path="Southwind.Terminal\Program.cs" Line="{&quot;AR&quot;, AuthLogic.ImportExportAuthRules},"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="EmployeeLoader.CreateUsers," DependsOn="Migrations,LoadNorthwind"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" From="CreateRoles," To="CreateSystemUser,"/>
			<RemoveLine Path="Southwind.Terminal\EmployeeLoader.cs" From="internal static void CreateUsers()" To="} //CreateUsers"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" From="internal static void CreateRoles()" To="} //CreateSystemUser"/>
			<RemoveFiles Path="Southwind\Globals\UserEmployeeMixin.cs" DependsOn="ExampleEntities"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="MixinDeclarations.Register&lt;UserEntity, UserEmployeeMixin&gt;();" DependsOn="ExampleEntities"/>
			<RemoveSpanInLines Path="Southwind\Globals\GlobalsClient.tsx" Span=", UserEmployeeMixin" DependsOn="ExampleEntities"/>
			<RemoveLine Path="Southwind\Globals\GlobalsClient.tsx"
					   From="Navigator.getSettings(UserEntity)!.overrideView((rep) => {"
					   To="});"
					   DependsOn="ExampleEntities"/>
			<RemoveSpanInLines Path="Southwind\Employees\EmployeeEntity.cs" Span="get { return (Lite&lt;EmployeeEntity>?)UserHolder.Current?.GetClaim(&quot;Employee&quot;); } //" DependsOn="ExampleEntities" />>
			<RemoveLine Path="Southwind\Layout.tsx" Line="const hasUser = Boolean(AuthClient.currentUser());" />
			<RemoveSpanInLines Path="Southwind\Layout.tsx" Span="hasUser &amp;&amp;" />
			<RemoveLine Path="Southwind\Layout.tsx" From="&lt;LoginDropdown" To="/>{/*LoginDropdown*/}"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { AuthAdminClient } from &quot;@extensions/Signum.Authorization/AuthAdminClient&quot;"/>
			<RemoveSpanInLines Path="Southwind\MainPublic.tsx" Span="await AuthClient.autoLogin();"/>
			<RemoveSpanInLines Path="Southwind\MainPublic.tsx" Span="Boolean(AuthClient.currentUser()) &amp;&amp; AuthClient.currentUser().userName != &quot;Anonymous&quot;; //"/>
			<RemoveSpanInLines Path="Southwind\MainPublic.tsx" Span=" &amp;&amp; AuthClient.currentUser().userName != &quot;Anonymous&quot;" DependsOn="PublicCatalog"/>
			<RemoveLine Path="Southwind\MainPublic.tsx" Line="AuthClient.startPublic({ routes, userTicket: true, notifyLogout: true });"/>
			<RemoveLine Path="Southwind\MainPublic.tsx" From="AuthClient.Options.onLogin = (url?: string) => {" To="};"/>
			<RemoveLine Path="Southwind\MainPublic.tsx" From="AuthClient.Options.onLogout = () => {" To="};"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="AuthAdminClient.start({ routes, types: true, properties: true, operations: true, queries: true, permissions: true });"/>
			<RemoveLine Path="Southwind.Test.Environment\SouthwindEnvironment.cs" From="internal static void LoadUsers()" To="}//LoadUsers"/>
			<RemoveLine Path="Southwind.Test.Environment\SouthwindEnvironment.cs" Line="user.SetMixin((UserEmployeeMixin e) => e.Employee, Database.Query&lt;EmployeeEntity>().SingleOrDefaultEx(e => e.FirstName == userName)?.ToLite());" DependsOn="ExampleEntities"/>
			<RemoveLine Path="Southwind.Test.Environment\EnvironmentTest.cs" Line="SouthwindEnvironment.LoadUsers();"/>
			<RemoveLine Path="Southwind.Test.Environment\EnvironmentTest.cs" Line="var authRules = XDocument.Load(@&quot;..\..\..\..\Southwind.Terminal\AuthRules.xml&quot;);"/>
			<RemoveLine Path="Southwind.Test.Environment\EnvironmentTest.cs" Line="AuthLogic.LoadRoles(authRules);"/>
			<RemoveLine Path="Southwind.Test.Environment\EnvironmentTest.cs" Line="AuthLogic.ImportRulesScript(authRules, interactive: false)!.PlainSqlCommand().ExecuteLeaves();"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Authorization;"/>
			<RemoveLine Path="Southwind.Test.Environment\SouthwindEnvironment.cs" Line="using Signum.Authorization;"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="using Signum.Authorization;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Authorization.Rules;"/>

			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Authorization\Signum.Authorization.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Authorization\Signum.Authorization.csproj"/>
		</Module>

		<Module Name="AzureAD" DependsOn="Auth">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Authorization.ActiveDirectory;"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" Line="using Signum.Authorization.ActiveDirectory;"/>
			<RemoveFiles Path="Southwind\SouthwindAuthorizer.cs" />
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Authorization.ActiveDirectory.Azure;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="AuthLogic.Authorizer = new SouthwindAuthorizer(() => Configuration.Value.ActiveDirectory);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="AzureADLogic.Start(sb, adGroupsAndQueries: true, deactivateUsersTask: true);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="MixinDeclarations.Register&lt;UserEntity, UserADMixin&gt;();"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.ImplementedByAllPrimaryKeyTypes.Add(typeof(Guid)); //because AzureAD" />
			<RemoveLine Path="Southwind\Layout.tsx" Line="changePasswordVisible={AuthClient.getAuthenticationType() != &quot;azureAD&quot;}"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" Line="public ActiveDirectoryConfigurationEmbedded ActiveDirectory { get; set; }"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { ActiveDirectoryClient } from &quot;@extensions/Signum.Authorization.ActiveDirectory/ActiveDirectoryClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="ActiveDirectoryClient.start({ routes, adGroups: false, inviteUsers: false, profilePhotos: false });"/>
			<RemoveLine Path="Southwind\MainPublic.tsx" Line="import { AzureADClient } from '@extensions/Signum.Authorization.ActiveDirectory/Azure/AzureADClient'"/>
			<RemoveLine Path="Southwind\MainPublic.tsx" From="if (window.__azureADConfig) {" To="}//__azureADConfig"/>
			<RemoveLine Path="Southwind\Index.cshtml" Line="var __azureADConfig = @Json.Serialize(Starter.Configuration.Value.ActiveDirectory.AzureAD?.ToAzureADConfigTS());"/>
			<RemoveLine Path="Southwind.Terminal/SouthwindMigrations.cs" Line="var standardUser = Database.Query&lt;RoleEntity&gt;().Single(a => a.Name == &quot;Standard user&quot;).ToLite();" />
			<RemoveLine Path="Southwind.Test.Environment/SouthwindEnvironment.cs" Line="var standardUser = Database.Query&lt;RoleEntity&gt;().Single(a => a.Name == &quot;Standard user&quot;).ToLite();" />
			<RemoveLine Path="Southwind.Terminal/SouthwindMigrations.cs" From="ActiveDirectory = new ActiveDirectoryConfigurationEmbedded" To="}, //ActiveDirectory" />
			<RemoveLine Path="Southwind.Test.Environment/SouthwindEnvironment.cs" From="ActiveDirectory = new ActiveDirectoryConfigurationEmbedded" To="}, //ActiveDirectory" />
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Authorization.ActiveDirectory\Signum.Authorization.ActiveDirectory.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Authorization.ActiveDirectory\Signum.Authorization.ActiveDirectory.csproj"/>
		</Module>

		<Module Name="Translation">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Translation;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Translation.Translators;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Translation.Instances;"/>
			<RemoveLine Path="Southwind\Starter.cs" From="TranslationLogic.Start(sb, countLocalizationHits: false," To="TranslatedInstanceLogic.Start(sb, () => CultureInfo.GetCultureInfo(&quot;en&quot;));"/>
			<RemoveFiles Path="Southwind\Translations" DependsOn="ExampleEntities" />
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { TranslationClient } from &quot;@extensions/Signum.Translation/TranslationClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { TranslatedInstanceClient } from &quot;@extensions/Signum.Translation/TranslatedInstanceClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="TranslationClient.start({ routes });"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="TranslatedInstanceClient.start({ routes });"/>
			<RemoveLine Path="Southwind\MainPublic.tsx" Line="import { CultureClient } from &quot;@framework/Basics/CultureClient&quot;"/>
			<RemoveLine Path="Southwind\MainPublic.tsx" Line="await CultureClient.loadCurrentCulture();"/>
			<RemoveLine Path="Southwind\MainPublic.tsx" Line="CultureClient.onCultureLoaded.push(ci => {"/>
			<RemoveLine Path="Southwind\MainPublic.tsx" Line="}); //Culture"/>
			<RemoveLine Path="Southwind.Terminal\Program.cs" Line="{&quot;CT&quot;, TranslationLogic.CopyTranslations},"/>
			<RemoveSpanInLines Path="Southwind\MainPublic.tsx" Span="ci.name!; //"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="ImportInstanceTranslations," DependsOn="LoadNorthwind,Migrations"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" From="public static void ImportInstanceTranslations()" To="}//ImportInstanceTranslations" DependsOn="LoadNorthwind"/>
			<RemoveFiles Path="Southwind.Terminal\InstanceTranslations\Category.es.View.xlsx" DependsOn="LoadNorthwind"/>
			<RemoveFiles Path="Southwind.Terminal\InstanceTranslations\Dashboard.es.View.xlsx" DependsOn="LoadNorthwind,Dashboard"/>
			<RemoveFiles Path="Southwind.Terminal\InstanceTranslations\UserQuery.es.View.xlsx" DependsOn="LoadNorthwind,UserQuery"/>
			<RemoveFiles Path="Southwind.Terminal\InstanceTranslations\UserChart.es.View.xlsx" DependsOn="LoadNorthwind,Chart"/>
			<RemoveFiles Path="Southwind.Terminal\InstanceTranslations\Toolbar.es.View.xlsx" DependsOn="LoadNorthwind,Toolbar"/>
			<RemoveFiles Path="Southwind.Terminal\InstanceTranslations\ToolbarMenu.es.View.xlsx" DependsOn="LoadNorthwind,Toolbar"/>
			<RemoveFiles Path="Southwind.Terminal\InstanceTranslations\Category.de.View.xlsx" DependsOn="LoadNorthwind"/>
			<RemoveFiles Path="Southwind.Terminal\InstanceTranslations\Dashboard.de.View.xlsx" DependsOn="LoadNorthwind,Dashboard"/>
			<RemoveFiles Path="Southwind.Terminal\InstanceTranslations\UserQuery.de.View.xlsx" DependsOn="LoadNorthwind,UserQuery"/>
			<RemoveFiles Path="Southwind.Terminal\InstanceTranslations\UserChart.de.View.xlsx" DependsOn="LoadNorthwind,Chart"/>
			<RemoveFiles Path="Southwind.Terminal\InstanceTranslations\Toolbar.de.View.xlsx" DependsOn="LoadNorthwind,Toolbar"/>
			<RemoveFiles Path="Southwind.Terminal\InstanceTranslations\ToolbarMenu.de.View.xlsx" DependsOn="LoadNorthwind,Toolbar"/>
			<RemoveLine Path="Southwind\Products\CategoryEntity.cs" Line="[Translatable] //Localize categoryName column" DependsOn="ExampleEntities"/>
			<RemoveLine Path="Southwind\Products\CategoryEntity.cs" Line="[Translatable] //Localize description column" DependsOn="ExampleEntities"/>
			<RemoveLine Path="Southwind\Layout.tsx" Line="{!hasUser &amp;&amp; &lt;CultureDropdown />}"/>
			<RemoveLine Path="Southwind\Layout.tsx" Line="extraMenuItems={u => hasUser &amp;&amp; &lt;CultureDropdownMenuItem />}"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Translation\Signum.Translation.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Translation\Signum.Translation.csproj"/>
		</Module>

		<Module Name="Auth_ResetPasswordRequest" DependsOn="Auth,Mailing">
			<RemoveLine Path="Southwind\Starter.cs" Line="ResetPasswordRequestLogic.Start(sb);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Authorization.ResetPassword;"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Authorization.ResetPassword\Signum.Authorization.ResetPassword.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Authorization.ResetPassword\Signum.Authorization.ResetPassword.csproj"/>
		</Module>

		<Module Name="Auth_UserTicket" DependsOn="Auth">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Authorization.UserTicket;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="UserTicketLogic.Start(sb);"/>
		</Module>

		<Module Name="SessionLog" DependsOn="Auth">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Authorization.SessionLog;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="SessionLogLogic.Start(sb);"/>
			<RemoveLine Path="Southwind.Terminal\Toolbar.xml" Line="&lt;ToolbarElement Type=&quot;Item&quot; Content=&quot;SessionLog&quot; />" />
		</Module>

		<Module Name="Alerts" DependsOn="SignalR">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Alerts;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="AlertLogic.Start(sb, typeof(UserEntity), /*Alert*/typeof(OrderEntity));"/>
			<RemoveSpanInLines Path="Southwind\Starter.cs" Span=", /*Alert*/typeof(OrderEntity)" DependsOn="ExampleEntities" />
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((AlertEntity a) => a.CreatedBy).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((AlertEntity a) => a.Recipient).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((AlertEntity a) => a.AttendedBy).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
			<RemoveLine Path="Southwind\Layout.tsx" Line="const AlertDropdown = React.lazy(() => import(&quot;@extensions/Signum.Alerts/AlertDropdown&quot;));"/>
			<RemoveLine Path="Southwind\Layout.tsx" Line="{hasUser &amp;&amp; &lt;React.Suspense fallback={null}>&lt;AlertDropdown />&lt;/React.Suspense>}"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { AlertsClient } from &quot;@extensions/Signum.Alerts/AlertsClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="AlertsClient.start({ routes, showAlerts: a => false });"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Alerts\Signum.Alerts.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Alerts\Signum.Alerts.csproj"/>
		</Module>
		
		<Module Name="SignalR" DependsOn="Auth">
			<RemoveLine Path="Southwind.Server\Program.cs" Line="builder.Services.AddSignalR();"/>
			<RemoveLine Path="Southwind\Index.cshtml" Line="var __disableSignalR = @Json.Serialize(Signum.ConcurrentUser.ConcurrentUserServer.DisableSignalR);"/>
		</Module>
		
		<Module Name="ConcurrentUser" DependsOn="SignalR">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.ConcurrentUser;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="ConcurrentUserLogic.Start(sb);"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { ConcurrentUserClient } from &quot;@extensions/Signum.ConcurrentUser/ConcurrentUserClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="ConcurrentUserClient.start({ routes });"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.ConcurrentUser\Signum.ConcurrentUser.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.ConcurrentUser\Signum.ConcurrentUser.csproj"/>
		</Module>

		<Module Name="Notes">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Notes;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="NoteLogic.Start(sb, typeof(UserEntity), /*Note*/typeof(OrderEntity));"/>
			<RemoveSpanInLines Path="Southwind\Starter.cs" Span=", /*Note*/typeof(OrderEntity)" DependsOn="ExampleEntities" />
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((NoteEntity n) => n.CreatedBy).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Notes\Signum.Notes.csproj&quot; />"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { NotesClient } from &quot;@extensions/Signum.Notes/NotesClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="NotesClient.start({ routes, couldHaveNotes: a => false });"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Notes\Signum.Notes.csproj"/>
		</Module>

		<Module Name="Cache">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Cache;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Cache.Broadcast;"/>
			<RemoveLine Path="Southwind\Starter.cs" From="CacheLogic.Start(sb, serverBroadcast:" To="null);/*Cache*/"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="SetupCache(sb);"/>
			<RemoveLine Path="Southwind\Starter.cs" From="private static void SetupCache(SchemaBuilder sb)" To="}"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="CacheClient.start({ routes });"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Caching\Signum.Caching.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Caching\Signum.Caching.csproj"/>
		</Module>

		<Module Name="SplitDB">
			<RemoveLine Path="Southwind\Starter.cs" Line="string? logDatabase = Connector.TryExtractDatabaseNameWithPostfix(ref connectionString, &quot;_Log&quot;);"/>
			<RemoveSpanInLines Path="Southwind\Starter.cs" Span="LogDatabaseName = logDatabase, "/>
			<RemoveLine Path="Southwind\Starter.cs" Line="public string? LogDatabaseName;"/>
			<RemoveLine Path="Southwind\Starter.cs" From="public Type[] InLogDatabase = new Type[]" To="};"/>
			<RemoveLine Path="Southwind\Starter.cs" From="if (this.LogDatabaseName == null)" To="return new DatabaseName(null, this.LogDatabaseName, this.Schema.Settings.IsPostgres);"/>
		</Module>

		<Module Name="PublicCatalog" DependsOn="ExampleEntities,Translation,Cache,Files">

			<RemoveFiles Path="Southwind\Public\CatalogController.cs"/>
			<RemoveFiles Path="Southwind\Public\PublicCatalog.tsx"/>
			<RemoveFiles Path="Southwind\Public\PublicClient.tsx"/>
			<RemoveFiles Path="Southwind\Public\PublicController.cs"/>
			<RemoveFiles Path="Southwind\Public\RegisterUserModel.cs"/>
			<RemoveFiles Path="Southwind\Public\Southwind.Public.t4s"/>
			<RemoveFiles Path="Southwind\Public\Southwind.Public.ts"/>
			<RemoveFiles Path="Southwind\Public\RegisterUser.tsx"/>
			<RemoveFiles Path="Southwind\Public\PublicLogic.cs" />
			<RemoveLine Path="Southwind\MainPublic.tsx"
						Line="import { PublicClient } from './Public/PublicClient'" />

			<RemoveLine Path="Southwind\MainPublic.tsx"
						Line="PublicClient.startPublic({ routes });" />

			<RemoveLine Path="Southwind\Starter.cs" Line="using Southwind.Public;" />
			<RemoveLine Path="Southwind\Starter.cs" Line="PublicLogic.Start(sb);" />
		


			<RemoveLine Path="Southwind\Products\ProductsLogic.cs" Line="public static ResetLazy&lt;FrozenDictionary&lt;CategoryEntity, List&lt;ProductEntity&gt;&gt;&gt; ActiveProducts = null!;"/>
			<RemoveLine Path="Southwind\Products\ProductsLogic.cs" From="ActiveProducts = sb.GlobalLazy(() =>" To="new InvalidateWith(typeof(ProductEntity)));"/>
			<RemoveLine Path="Southwind\MainPublic.tsx" Line="routes.push({ path: &quot;/publicCatalog&quot;, element: &lt;PublicCatalog /> });"/>
			<RemoveLine Path="Southwind\MainPublic.tsx" Line="import PublicCatalog from './Public/PublicCatalog'"/>
			<RemoveLine Path="Southwind\Home.tsx" From="if (!AuthClient.currentUser()) {" To="}//PublicCatalog"/>



		</Module>

		<Module Name="Profiler">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Profiler;"/>
			<RemoveLine Path="Southwind\Starter.cs" From="ProfilerLogic.Start(sb," To="overrideSessionTimeout: true);"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { ProfilerClient } from &quot;@extensions/Signum.Profiler/ProfilerClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="ProfilerClient.start({ routes });"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Profiler\Signum.Profiler.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Profiler\Signum.Profiler.csproj"/>
		</Module>

		<Module Name="Omnibox">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Omnibox;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="OmniboxLogic.Start(sb);"/>
			<RemoveLine Path="Southwind\Layout.tsx" Line="{hasUser &amp;&amp; AppContext.isPermissionAuthorized(OmniboxPermission.ViewOmnibox) &amp;&amp; &lt;OmniboxAutocomplete inputAttrs={{ className: &quot;form-control omnibox&quot; }} />}"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { OmniboxClient } from &quot;@extensions/Signum.Omnibox/OmniboxClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="OmniboxClient.start();"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Omnibox\Signum.Omnibox.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Omnibox\Signum.Omnibox.csproj"/>
		</Module>

		<Module Name="Map">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Map;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="MapLogic.Start(sb);"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { MapClient } from &quot;@extensions/Signum.Map/MapClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="MapClient.start({ routes });"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Map\Signum.Map.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Map\Signum.Map.csproj"/>
		</Module>

		<Module Name="Help">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Help;"/>
			<RemoveLine Path="Southwind.Terminal\Program.cs" Line="using Signum.Help;"/>
			<RemoveLine Path="Southwind.Terminal\Program.cs" Line="{&quot;HL&quot;, HelpXml.ImportExportHelp},"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="HelpLogic.Start(sb, GetFileTypeAlgorithm(p => p.HelpImagesFolder));"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Help\Signum.Help.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Help\Signum.Help.csproj"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { HelpClient } from &quot;@extensions/Signum.Help/HelpClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="HelpClient.start({ routes });"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" From="/*Help*/" To="public string HelpImagesFolder { get; set; }"/>
			<RemoveLine DependsOn="PublicAPI" Path="Southwind.Terminal\SouthwindMigrations.cs" Line="HelpImagesFolder = localPrefix + @&quot;help-image&quot;,"/>
			<RemoveLine DependsOn="PublicAPI" Path="Southwind.Test.Environment\SouthwindEnvironment.cs" Line="HelpImagesFolder = localPrefix + @&quot;help-image&quot;,"/>

		</Module>

		<Module Name="PublicAPI">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Rest;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="RestLogLogic.Start(sb);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="RestApiKeyLogic.Start(sb);"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((RestLogEntity a) => a.User).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
			<RemoveLine Path="Southwind\Layout.tsx" From="&lt;Nav.Item> {/*Swagger*/}" To="&lt;/Nav.Item> {/*Swagger*/}"/>
			<RemoveLine Path="Southwind\Layout.tsx" From="function handleSwaggerClick(e: React.MouseEvent&lt;any>) {" To="} //Swagger"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { RestClient } from &quot;@extensions/Signum.Rest/RestClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="RestClient.start({ routes });"/>
			<RemoveFiles Path="Southwind\Public\CatalogAPIController.cs"/>
			<RemoveLine Path="Southwind.Server\Program.cs" Line="//https://docs.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-swashbuckle?view=aspnetcore-2.1&amp;tabs=visual-studio%2Cvisual-studio-xml" />
			<RemoveLine Path="Southwind.Server\Program.cs" Line="SwaggerConfig.ConfigureSwaggerService(builder);" />
			<RemoveLine Path="Southwind.Server\Program.cs" From="//Enable middleware to serve generated Swagger as a JSON endpoint." To="});//Swagger Configure"/>
			<RemoveFiles Path="Southwind\SwaggerConfig.cs" />

			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Rest\Signum.Rest.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Rest\Signum.Rest.csproj"/>
		</Module>

		<Module Name="Predictor" DependsOn="Files">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.MachineLearning;"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="using Signum.MachineLearning;"/>
			<RemoveLine Path="Southwind.Terminal\Program.cs" Line="using Signum.MachineLearning;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.MachineLearning.TensorFlow;"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" From="/*Predictor*/" To="public string PredictorModelFolder { get; set; }"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Terminal\SouthwindMigrations.cs" Line="ImportPredictor,"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="PredictorModelFolder = localPrefix + @&quot;predictor-models&quot;,"/>
			<RemoveLine Path="Southwind.Test.Environment\SouthwindEnvironment.cs" Line="PredictorModelFolder = localPrefix + @&quot;predictor-models&quot;,"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Terminal\SouthwindMigrations.cs" From="public static void ImportPredictor()" To="}//ImportPredictor"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Terminal\Program.cs" Line="{&quot;TP&quot;, TrainPredictor},"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Terminal\Program.cs" From="static void TrainPredictor()" To="}//TrainPredictor"/>

			<RemoveLine Path="Southwind.Terminal\Southwind.Terminal.csproj" Line="&lt;PackageReference Include=&quot;SciSharp.TensorFlow.Redist&quot; Version=&quot;2.16.0&quot; />"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;PackageReference Include=&quot;SciSharp.TensorFlow.Redist&quot; Version=&quot;2.16.0&quot; />"/>
			<RemoveSpanInLines Path="Southwind\Starter.cs" Span=", typeof(PredictorEntity)"/>

			<RemoveLine Path="Southwind\Starter.cs"
						From="PredictorLogic.Start(sb, GetFileTypeAlgorithm(p => p.PredictorModelFolder));"
						To="PredictorLogic.RegisterAlgorithm(TensorFlowPredictorAlgorithm.NeuralNetworkGraph, new TensorFlowNeuralNetworkPredictor());"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="PredictorLogic.IgnorePinned(sb);" />
			<RemoveLine Path="Southwind\Starter.cs" DependsOn="ExampleEntities" Line="PredictorLogic.RegisterPublication(ProductPredictorPublication.MonthlySales, new PublicationSettings(typeof(OrderEntity)));"/>
			<RemoveSpanInLines Path="Southwind\Starter.cs" Span=", typeof(AutoconfigureNeuralNetworkEntity)"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { PredictorClient } from &quot;@extensions/Signum.MachineLearning/PredictorClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="PredictorClient.start({ routes });"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Products\ProductEntity.cs" From="[AutoInit]//Predictor" To="}//Predictor"/>
			<RemoveFiles DependsOn="ExampleEntities" Path="Southwind\Products\SalesEstimationController.cs"/>
			<RemoveFiles DependsOn="ExampleEntities" Path="Southwind\Products\SalesEstimation.tsx"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Products\Product.tsx" Line="import SalesEstimation from './SalesEstimation';"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind\Products\Product.tsx" Line="{!ctx.value.isNew &amp;&amp; &lt;SalesEstimation ctx={ctx} />}"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.MachineLearning\Signum.MachineLearning.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.MachineLearning\Signum.MachineLearning.csproj"/>
		</Module>

		<Module Name="TimeMachine">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.TimeMachine;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="TimeMachineLogic.Start(sb);"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { TimeMachineClient } from &quot;@extensions/Signum.TimeMachine/TimeMachineClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="TimeMachineClient.start({ routes });"/>
		</Module>

		<Module Name="Dynamic">
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Dynamic;"/>
			<RemoveLine Path="Southwind.Server\Program.cs" Line="using Signum.Dynamic;"/>
			<RemoveLine Path="Southwind.Terminal\Program.cs" Line="using Signum.Dynamic;"/>
			<RemoveFiles Path="Southwind\DynamicLogicStarter.cs" />
			<RemoveLine Path="Southwind\Starter.cs" Line="StartParameters.IgnoredDatabaseMismatches = new List&lt;Exception>();"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="StartParameters.IgnoredCodeErrors = new List&lt;Exception>();"/>
			<RemoveLine Path="Southwind\Starter.cs" From="DynamicLogicStarter.Start(sb);" To="}//Dynamic"/>
			<RemoveLine Path="Southwind\Starter.cs" From="if (includeDynamic)//2" To="}//2"/>
			<RemoveLine Path="Southwind\Starter.cs" From="if (includeDynamic)//3" To="}//3"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx"
						From="import { DynamicClient } from &quot;@extensions/Signum.Dynamic/DynamicClient&quot;"
						To="import { DynamicViewClient } from &quot;@extensions/Signum.Dynamic/DynamicViewClient&quot;"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx"
						From="DynamicClient.start({ routes, withCodeGen: true });"
						To="DynamicViewClient.start({ routes });"/>
						
			<RemoveLine Path="Southwind.Terminal\Program.cs" Line="DynamicLogic.CodeGenDirectory = @&quot;..\..\..\..\Southwind.Server\CodeGen&quot;;"/>
			<RemoveLine Path="Southwind.Server\Program.cs" Line="DynamicLogic.CodeGenDirectory = app.Environment.ContentRootPath + &quot;\\CodeGen&quot;;"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Dynamic\Signum.Dynamic.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Dynamic\Signum.Dynamic.csproj"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Tree\Signum.Tree.csproj"/>
		</Module>

		<Module Name="Workflow">
			<RemoveLine Path="Southwind.Test.Environment\SouthwindEnvironment.cs" Line="using Signum.Workflow;"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="using Signum.Workflow;"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" Line="using Signum.Workflow;"/>
			<RemoveSpanInLines Path="Southwind\Starter.cs" Span=", typeof(WorkflowEntity)"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" Line="using Signum.Workflow;"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfigurationEntity.cs" From="/*Workflow*/" To="public WorkflowConfigurationEmbedded Workflow { get; set; }"/>
			<RemoveLine Path="Southwind\Globals\ApplicationConfiguration.tsx" From="&lt;Tab eventKey=&quot;workflow&quot; title={ctx.niceName(a => a.workflow)}>" To="&lt;/Tab>"/>
			<RemoveLine Path="Southwind\Starter.cs" Line="WorkflowLogicStarter.Start(sb, () => Configuration.Value.Workflow);"/>
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="import { WorkflowClient } from &quot;@extensions/Signum.Workflow/WorkflowClient&quot;" />
			<RemoveLine Path="Southwind\MainAdmin.tsx" Line="WorkflowClient.start({ routes });"/>
			<RemoveLine Path="Southwind.Terminal\SouthwindMigrations.cs" From="Workflow = new WorkflowConfigurationEmbedded" To="}, //Workflow"/>
			<RemoveLine Path="Southwind.Test.Environment\SouthwindEnvironment.cs" From="Workflow = new WorkflowConfigurationEmbedded" To="}, //Workflow"/>
			<RemoveLine Path="Southwind\Southwind.csproj" Line="&lt;ProjectReference Include=&quot;..\Framework\Extensions\Signum.Workflow\Signum.Workflow.csproj&quot; />"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Workflow\Signum.Workflow.csproj"/>

		</Module>

		<Module Name="Test.Environment">
			<RemoveFiles Path="Southwind.Test.Environment"/>

			<RemoveLine DependsOn="ExampleEntities"  Path="Southwind.Test.Environment\SouthwindEnvironment.cs"
						From="internal static void LoadEmployees()"
						To="} //LoadEmployees" />
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.Environment\SouthwindEnvironment.cs"
						 From="internal static void LoadProducts()"
						 To="}//LoadShippers" />
			<RemoveFiles DependsOn="ExampleEntities" Path="Southwind.Test.Environment\SouthwindExtensions.cs" />

			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.Environment\EnvironmentTest.cs" Line="SouthwindEnvironment.LoadEmployees();"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.Environment\EnvironmentTest.cs" Line="SouthwindEnvironment.LoadProducts();"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.Environment\EnvironmentTest.cs" Line="SouthwindEnvironment.LoadCustomers();"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.Environment\EnvironmentTest.cs" Line="SouthwindEnvironment.LoadShippers();"/>
		</Module>

		<Module Name="Test.Logic" DependsOn="Test.Environment">
			<RemoveFiles Path="Southwind.Test.Logic"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.Logic\OrderTest.cs" From="[Fact]" To="}//OrderTestExample"/>
		</Module>vp

		<Module Name="Test.React" DependsOn="Test.Environment">
			<RemoveFiles Path="Southwind.Test.React"/>
			<RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.React\OrderReactTest.cs" From="[Fact]" To="}//OrderReactTestExample"/>
			<RemoveProjectReference Path="Framework\Extensions\Signum.Selenium\Signum.Selenium.csproj"/>
		</Module>

		<Module Name="Docker">
			<RemoveFiles Path="Southwind.Server\Dockerfile"/>
			<RemoveFiles Path=".dockerignore"/>
			<RemoveFiles Path="deployToAzureLIVE.ps1"/>
			<RemoveFiles Path="deployToAzureTEST.ps1"/>
		</Module>

		<Module Name="Bicep">
			<RemoveFiles Path="azure-container-registry.bicep"/>
			<RemoveFiles Path="azure-main-sqls-postgres.bicep" />
			<RemoveFiles Path="azure-environment.bicep" />
			<RemoveFiles Path="azure-main-live-test.bicep" />
		</Module>

		<Module Name="GitlabCICD">
			<RemoveFiles Path=".gitlab-ci.yml" />
		</Module>
	</Modules>

	<Projects>
		<Project Path ="Southwind\Southwind.csproj"/>
		<Project Path ="Southwind.Terminal\Southwind.Terminal.csproj"/>
		<Project Path ="Southwind.Test.Environment\Southwind.Test.Environment.csproj"/>
		<Project Path ="Southwind.Test.Logic\Southwind.Test.Logic.csproj"/>
		<Project Path ="Southwind.Test.React\Southwind.Test.React.csproj"/>
	</Projects>

	<Solutions>
		<Solution Path="Southwind.sln" />
	</Solutions>
</File>
